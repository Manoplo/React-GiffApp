{"version":3,"sources":["components/AddCategory.js","components/helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","components/hooks/useFetchGifs.js","GiffApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setValue","onSubmit","e","preventDefault","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6KAKaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAGzB,EAA+BC,mBAAS,0BAAxC,mBAAOC,EAAP,KAAmBC,EAAnB,KAwBA,OACI,mCACI,sBAAMC,SAnBO,SAACC,GAElBA,EAAEC,iBAECJ,EAAWK,OAAO,IACjBP,GAAc,SAACQ,GAAD,OAASN,GAAT,mBAAuBM,OACrCL,EAAS,MAaT,SACA,uBACIM,KAAK,OACLC,MAAOR,EACPS,SA3Bc,SAACN,GACvBF,EAASE,EAAEO,OAAOF,e,+BCXTG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAMbC,EANa,iDAMmCC,UAAUH,GAN7C,+DASAI,MAAMF,GATN,cASbG,EATa,gBAWEA,EAAKC,OAXP,uBAWZC,EAXY,EAWZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACvB,MAAO,CACHC,GAAKD,EAAIC,GACTC,MAAOF,EAAIE,MACXV,IAAG,UAAGQ,EAAIG,cAAP,aAAG,EAAYC,iBAAiBZ,QAI3Ca,QAAQC,IAAIR,GArBO,kBAsBZA,GAtBY,4CAAH,sDCcTS,EAbK,SAAC,GAAkB,IAAjBL,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEzB,OACI,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCDHS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAGrB,ECFwB,SAACA,GAEzB,MAA0Bb,mBAAS,CAC/BoB,KAAO,GACPe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAdGC,qBAAU,WAET1B,EAAQC,GACP0B,MAAK,SAAAC,GAEFH,EAAS,CACLjB,KAAKoB,EACLL,SAAQ,SAIlB,CAACtB,IAGIuB,EDrBuBK,CAAa5B,GAA/Ba,EAAZ,EAAON,KAAYe,EAAnB,EAAmBA,QAInB,OACI,qCACI,oBAAIJ,UAAU,MAAd,SAAqBlB,IAGhBsB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEZ,qBAAKA,UAAU,YAAf,SAGYL,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEKA,GADCA,EAAIC,aErB7BkB,EAAS,WAIlB,MAAoC1C,mBAAS,CAAC,KAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAIA,OAEI,qCACA,yCACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAKA,6BAGI4C,EAAWrB,KAAK,SAAAT,GAAQ,OAEpB,cAAC,EAAD,CAEAA,SAAUA,GADLA,Y,MCrBrB+B,IAASC,OAAO,cAAC,EAAD,IAAWC,SAASC,eAAe,W","file":"static/js/main.f5839fcf.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    //Añado un hook de estado. \r\n    const [inputValue, setValue] = useState('Busca tus gifs aquí');\r\n\r\n\r\n    const handleInputChange = (e)=>{\r\n        setValue(e.target.value);\r\n    }\r\n    \r\n    const handleSubmit = (e)=>{\r\n        \r\n        e.preventDefault();\r\n\r\n        if(inputValue.length>2){\r\n            setCategories((cats)=>[inputValue,...cats,]);\r\n            setValue('');\r\n        }\r\n        \r\n            \r\n\r\n        \r\n       \r\n        \r\n\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange = {handleInputChange}\r\n            \r\n            />\r\n            </form>\r\n           \r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}","\r\n    export const getGifs = async (category) =>{\r\n\r\n        \r\n\r\n        // Probamos el endpoint con POSTMAN\r\n        //encodeURI pilla la categoría que le pasemos por category y le quita espacios etc. \r\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=E1aIlP6QjjzawxUTIMiyyPEajC0pQG5i`;\r\n\r\n        // Hacemos una petición a la url\r\n        const resp = await fetch(url);\r\n        //Desestructuramos la parte que nos interesa del array que se devuelve (en este caso, data)\r\n        const {data} = await resp.json();\r\n        // Hacemos un .map a la data y, por cada item, devolvemos solo las partes que nos interesan (item.id, item.title, y la imagen en sí a el tamaño que nos interese. )\r\n        const gifs = data.map(img=>{\r\n            return {\r\n                id : img.id,\r\n                title: img.title,\r\n                url : img.images?.downsized_medium.url\r\n            }\r\n        })\r\n\r\n        console.log(gifs);\r\n        return gifs;\r\n\r\n    }\r\n","import React from 'react'\r\n// Como hice un spread operator de la data recibida, puedo pasarle lo que me interese como props a este componente. \r\nconst GifGridItem = ({title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport { useFetchGifs } from './hooks/useFetchGifs'\r\n//import { getGifs } from './helpers/getGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n    \r\n    // Podemos renombrar una variable extraida con desestructuracion con : (el campo data del objeto categoría lo renombramos a images)\r\n    const {data:images,loading} = useFetchGifs(category);\r\n    \r\n    \r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"cat\">{category}</h3>\r\n\r\n                {/*Operador ternario, si es true haz eso, si no, no hagas nada*/}\r\n                {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n            \r\n                <div className=\"card-grid\">\r\n                    {\r\n                    // Hago un foreach de las imagenes recibidas en el useState, creo un componente al que le paso el id y hago un spread operator para mandarle todas las propiedades que hemos extraido de la api al componente GifGridItem. \r\n                            images.map((img)=>(\r\n                                <GifGridItem \r\n                                 key={img.id}\r\n                                 {...img}\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","\r\n\r\n//CUSTOM HOOKS\r\n\r\nimport { useEffect, useState } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category)=>{\r\n\r\n    const [state, setstate] = useState({\r\n        data : [],\r\n        loading: true\r\n\r\n    });\r\n\r\n       // UseEffect llama a la función getGifs SÓLO CUANDO EL COMPONENTE ES RENDERIZADO LA PRIMERA VEZ. Hay que pasarle una lista de dependiencias (category) como segundo argumento para decirle cuando tiene que dispararse (al cambiar una category, en este caso)\r\n       useEffect(()=>{\r\n        \r\n        getGifs(category)\r\n        .then(imgs=>{\r\n            \r\n            setstate({\r\n                data:imgs,\r\n                loading:false\r\n            }); \r\n        })\r\n      \r\n    },[category]);\r\n\r\n    \r\n    return state\r\n}","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport {GifGrid} from './components/GifGrid';\r\n\r\nexport const GifApp = ()=>{\r\n\r\n\r\n    //Usamos hook useState. \r\n    const [categories, setCategories] = useState(['']);\r\n\r\n \r\n\r\n    return  (\r\n\r\n        <>\r\n        <h2>GiffApp</h2>\r\n        <AddCategory setCategories ={setCategories}/>\r\n        <hr/>\r\n\r\n        \r\n        \r\n\r\n        <ol>\r\n            {/*El .map es como un foreach*/}\r\n            {\r\n            categories.map( category => (\r\n                \r\n                <GifGrid \r\n                key={category}\r\n                category={category}/>\r\n            ))\r\n            }\r\n        </ol>\r\n\r\n        </>\r\n\r\n    );\r\n\r\n}\r\n\r\n    \r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifApp} from './GiffApp';\n\nimport './index.css';\n\n\nReactDOM.render(<GifApp/>, document.getElementById('root'));\n"],"sourceRoot":""}